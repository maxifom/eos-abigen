// Generated by eos-abigen version master

export const CONTRACT_NAME = "eosio";

export type Authorization = {
	actor: string;
	permission: string;
}

export type Action = {
	account: string;
	name: string;
	authorization: Authorization[];
	data: object;
}

export type GetTableRowsParams = Partial<{
    code: string
    scope: string
    bounds: string
    lower_bound: string
    upper_bound: string
    index_position: number
    key_type: string
    limit: number
    reverse: boolean
    show_payer: boolean
}>

export class Symbol {
	readonly raw: string;
	readonly precision: number;
	readonly symbol_code: string;

	public constructor(raw: string) {
		this.raw = raw;
		const [precision, symbol_code] = raw.split(",", 2)
		this.precision = Number.parseInt(precision);
		this.symbol_code = symbol_code;
	}
}

export class Asset {
	readonly raw: string;
	readonly raw_quantity: string;
	readonly quantity: number;
	readonly precision: number;
	readonly symbol_code: string;

	public constructor(raw: string) {
		this.raw = raw;
		const [quantity, symbol_code] = raw.split(" ", 2);
		this.raw_quantity = quantity;
		this.precision = 0;
		const splitted = quantity.split(".");
		if (splitted.length > 1) {
			this.precision = splitted[1].length;
		}
		
		this.quantity = Number.parseFloat(quantity);
		this.symbol_code = symbol_code;
	}
}

export type ExtendedAssetType = {
	quantity: string
	contract: string
}

export class ExtendedAsset {
	readonly asset: Asset;
	readonly contract: string;

	public constructor(raw: ExtendedAssetType) {
		this.asset = new Asset(raw.quantity);
		this.contract = raw.contract;
	}
}

export type AbiHash = {
	owner: string
	hash: string
};

export type AbiHashInterm = {
	owner: string
	hash: string
};

export function mapAbiHash(r: AbiHashInterm): AbiHash {
	return {
		owner: r.owner,
		hash: r.hash,
	}
}

export type Activate = {
	feature_digest: string
};

export type ActivateInterm = {
	feature_digest: string
};

export function mapActivate(r: ActivateInterm): Activate {
	return {
		feature_digest: r.feature_digest,
	}
}

export type Authority = {
	threshold: number
	keys: KeyWeight[]
	accounts: PermissionLevelWeight[]
	waits: WaitWeight[]
};

export type AuthorityInterm = {
	threshold: number
	keys: KeyWeightInterm[]
	accounts: PermissionLevelWeightInterm[]
	waits: WaitWeightInterm[]
};

export function mapAuthority(r: AuthorityInterm): Authority {
	return {
		threshold: r.threshold,
		keys: r.keys.map(n => mapKeyWeight(n)),
		accounts: r.accounts.map(n => mapPermissionLevelWeight(n)),
		waits: r.waits.map(n => mapWaitWeight(n)),
	}
}

export type BidRefund = {
	bidder: string
	amount: Asset
};

export type BidRefundInterm = {
	bidder: string
	amount: string
};

export function mapBidRefund(r: BidRefundInterm): BidRefund {
	return {
		bidder: r.bidder,
		amount: new Asset(r.amount),
	}
}

export type Bidname = {
	bidder: string
	newname: string
	bid: Asset
};

export type BidnameInterm = {
	bidder: string
	newname: string
	bid: string
};

export function mapBidname(r: BidnameInterm): Bidname {
	return {
		bidder: r.bidder,
		newname: r.newname,
		bid: new Asset(r.bid),
	}
}

export type Bidrefund = {
	bidder: string
	newname: string
};

export type BidrefundInterm = {
	bidder: string
	newname: string
};

export function mapBidrefund(r: BidrefundInterm): Bidrefund {
	return {
		bidder: r.bidder,
		newname: r.newname,
	}
}

export type BlockHeader = {
	timestamp: number
	producer: string
	confirmed: number
	previous: string
	transaction_mroot: string
	action_mroot: string
	schedule_version: number
	new_producers: unknown
};

export type BlockHeaderInterm = {
	timestamp: number
	producer: string
	confirmed: number
	previous: string
	transaction_mroot: string
	action_mroot: string
	schedule_version: number
	new_producers: unknown
};

export function mapBlockHeader(r: BlockHeaderInterm): BlockHeader {
	return {
		timestamp: r.timestamp,
		producer: r.producer,
		confirmed: r.confirmed,
		previous: r.previous,
		transaction_mroot: r.transaction_mroot,
		action_mroot: r.action_mroot,
		schedule_version: r.schedule_version,
		new_producers: r.new_producers,
	}
}

export type BlockSigningAuthorityV0 = {
	threshold: number
	keys: KeyWeight[]
};

export type BlockSigningAuthorityV0Interm = {
	threshold: number
	keys: KeyWeightInterm[]
};

export function mapBlockSigningAuthorityV0(r: BlockSigningAuthorityV0Interm): BlockSigningAuthorityV0 {
	return {
		threshold: r.threshold,
		keys: r.keys.map(n => mapKeyWeight(n)),
	}
}

export type BlockchainParameters = {
	max_block_net_usage: string
	target_block_net_usage_pct: number
	max_transaction_net_usage: number
	base_per_transaction_net_usage: number
	net_usage_leeway: number
	context_free_discount_net_usage_num: number
	context_free_discount_net_usage_den: number
	max_block_cpu_usage: number
	target_block_cpu_usage_pct: number
	max_transaction_cpu_usage: number
	min_transaction_cpu_usage: number
	max_transaction_lifetime: number
	deferred_trx_expiration_window: number
	max_transaction_delay: number
	max_inline_action_size: number
	max_inline_action_depth: number
	max_authority_depth: number
};

export type BlockchainParametersInterm = {
	max_block_net_usage: number
	target_block_net_usage_pct: number
	max_transaction_net_usage: number
	base_per_transaction_net_usage: number
	net_usage_leeway: number
	context_free_discount_net_usage_num: number
	context_free_discount_net_usage_den: number
	max_block_cpu_usage: number
	target_block_cpu_usage_pct: number
	max_transaction_cpu_usage: number
	min_transaction_cpu_usage: number
	max_transaction_lifetime: number
	deferred_trx_expiration_window: number
	max_transaction_delay: number
	max_inline_action_size: number
	max_inline_action_depth: number
	max_authority_depth: number
};

export function mapBlockchainParameters(r: BlockchainParametersInterm): BlockchainParameters {
	return {
		max_block_net_usage: r.max_block_net_usage.toString(),
		target_block_net_usage_pct: r.target_block_net_usage_pct,
		max_transaction_net_usage: r.max_transaction_net_usage,
		base_per_transaction_net_usage: r.base_per_transaction_net_usage,
		net_usage_leeway: r.net_usage_leeway,
		context_free_discount_net_usage_num: r.context_free_discount_net_usage_num,
		context_free_discount_net_usage_den: r.context_free_discount_net_usage_den,
		max_block_cpu_usage: r.max_block_cpu_usage,
		target_block_cpu_usage_pct: r.target_block_cpu_usage_pct,
		max_transaction_cpu_usage: r.max_transaction_cpu_usage,
		min_transaction_cpu_usage: r.min_transaction_cpu_usage,
		max_transaction_lifetime: r.max_transaction_lifetime,
		deferred_trx_expiration_window: r.deferred_trx_expiration_window,
		max_transaction_delay: r.max_transaction_delay,
		max_inline_action_size: r.max_inline_action_size,
		max_inline_action_depth: r.max_inline_action_depth,
		max_authority_depth: r.max_authority_depth,
	}
}

export type Buyram = {
	payer: string
	receiver: string
	quant: Asset
};

export type BuyramInterm = {
	payer: string
	receiver: string
	quant: string
};

export function mapBuyram(r: BuyramInterm): Buyram {
	return {
		payer: r.payer,
		receiver: r.receiver,
		quant: new Asset(r.quant),
	}
}

export type Buyrambytes = {
	payer: string
	receiver: string
	bytes: number
};

export type BuyrambytesInterm = {
	payer: string
	receiver: string
	bytes: number
};

export function mapBuyrambytes(r: BuyrambytesInterm): Buyrambytes {
	return {
		payer: r.payer,
		receiver: r.receiver,
		bytes: r.bytes,
	}
}

export type Buyrex = {
	from: string
	amount: Asset
};

export type BuyrexInterm = {
	from: string
	amount: string
};

export function mapBuyrex(r: BuyrexInterm): Buyrex {
	return {
		from: r.from,
		amount: new Asset(r.amount),
	}
}

export type Canceldelay = {
	canceling_auth: PermissionLevel
	trx_id: string
};

export type CanceldelayInterm = {
	canceling_auth: PermissionLevelInterm
	trx_id: string
};

export function mapCanceldelay(r: CanceldelayInterm): Canceldelay {
	return {
		canceling_auth: mapPermissionLevel(r.canceling_auth),
		trx_id: r.trx_id,
	}
}

export type Cfgpowerup = {
	args: PowerupConfig
};

export type CfgpowerupInterm = {
	args: PowerupConfigInterm
};

export function mapCfgpowerup(r: CfgpowerupInterm): Cfgpowerup {
	return {
		args: mapPowerupConfig(r.args),
	}
}

export type Claimrewards = {
	owner: string
};

export type ClaimrewardsInterm = {
	owner: string
};

export function mapClaimrewards(r: ClaimrewardsInterm): Claimrewards {
	return {
		owner: r.owner,
	}
}

export type Closerex = {
	owner: string
};

export type CloserexInterm = {
	owner: string
};

export function mapCloserex(r: CloserexInterm): Closerex {
	return {
		owner: r.owner,
	}
}

export type Cnclrexorder = {
	owner: string
};

export type CnclrexorderInterm = {
	owner: string
};

export function mapCnclrexorder(r: CnclrexorderInterm): Cnclrexorder {
	return {
		owner: r.owner,
	}
}

export type Connector = {
	balance: Asset
	weight: number
};

export type ConnectorInterm = {
	balance: string
	weight: string
};

export function mapConnector(r: ConnectorInterm): Connector {
	return {
		balance: new Asset(r.balance),
		weight: Number.parseFloat(r.weight),
	}
}

export type Consolidate = {
	owner: string
};

export type ConsolidateInterm = {
	owner: string
};

export function mapConsolidate(r: ConsolidateInterm): Consolidate {
	return {
		owner: r.owner,
	}
}

export type Defcpuloan = {
	from: string
	loan_num: string
	amount: Asset
};

export type DefcpuloanInterm = {
	from: string
	loan_num: number
	amount: string
};

export function mapDefcpuloan(r: DefcpuloanInterm): Defcpuloan {
	return {
		from: r.from,
		loan_num: r.loan_num.toString(),
		amount: new Asset(r.amount),
	}
}

export type Defnetloan = {
	from: string
	loan_num: string
	amount: Asset
};

export type DefnetloanInterm = {
	from: string
	loan_num: number
	amount: string
};

export function mapDefnetloan(r: DefnetloanInterm): Defnetloan {
	return {
		from: r.from,
		loan_num: r.loan_num.toString(),
		amount: new Asset(r.amount),
	}
}

export type Delegatebw = {
	from: string
	receiver: string
	stake_net_quantity: Asset
	stake_cpu_quantity: Asset
	transfer: boolean
};

export type DelegatebwInterm = {
	from: string
	receiver: string
	stake_net_quantity: string
	stake_cpu_quantity: string
	transfer: number
};

export function mapDelegatebw(r: DelegatebwInterm): Delegatebw {
	return {
		from: r.from,
		receiver: r.receiver,
		stake_net_quantity: new Asset(r.stake_net_quantity),
		stake_cpu_quantity: new Asset(r.stake_cpu_quantity),
		transfer: !!(r.transfer),
	}
}

export type DelegatedBandwidth = {
	from: string
	to: string
	net_weight: Asset
	cpu_weight: Asset
};

export type DelegatedBandwidthInterm = {
	from: string
	to: string
	net_weight: string
	cpu_weight: string
};

export function mapDelegatedBandwidth(r: DelegatedBandwidthInterm): DelegatedBandwidth {
	return {
		from: r.from,
		to: r.to,
		net_weight: new Asset(r.net_weight),
		cpu_weight: new Asset(r.cpu_weight),
	}
}

export type Deleteauth = {
	account: string
	permission: string
};

export type DeleteauthInterm = {
	account: string
	permission: string
};

export function mapDeleteauth(r: DeleteauthInterm): Deleteauth {
	return {
		account: r.account,
		permission: r.permission,
	}
}

export type Deposit = {
	owner: string
	amount: Asset
};

export type DepositInterm = {
	owner: string
	amount: string
};

export function mapDeposit(r: DepositInterm): Deposit {
	return {
		owner: r.owner,
		amount: new Asset(r.amount),
	}
}

export type EosioGlobalState = {
	max_ram_size: string
	total_ram_bytes_reserved: string
	total_ram_stake: string
	last_producer_schedule_update: string
	last_pervote_bucket_fill: string
	pervote_bucket: string
	perblock_bucket: string
	total_unpaid_blocks: number
	total_activated_stake: string
	thresh_activated_stake_time: string
	last_producer_schedule_size: number
	total_producer_vote_weight: number
	last_name_close: string
};

export type EosioGlobalStateInterm = {
	max_ram_size: number
	total_ram_bytes_reserved: number
	total_ram_stake: number
	last_producer_schedule_update: string
	last_pervote_bucket_fill: string
	pervote_bucket: number
	perblock_bucket: number
	total_unpaid_blocks: number
	total_activated_stake: number
	thresh_activated_stake_time: string
	last_producer_schedule_size: number
	total_producer_vote_weight: string
	last_name_close: string
};

export function mapEosioGlobalState(r: EosioGlobalStateInterm): EosioGlobalState {
	return {
		max_ram_size: r.max_ram_size.toString(),
		total_ram_bytes_reserved: r.total_ram_bytes_reserved.toString(),
		total_ram_stake: r.total_ram_stake.toString(),
		last_producer_schedule_update: r.last_producer_schedule_update,
		last_pervote_bucket_fill: r.last_pervote_bucket_fill,
		pervote_bucket: r.pervote_bucket.toString(),
		perblock_bucket: r.perblock_bucket.toString(),
		total_unpaid_blocks: r.total_unpaid_blocks,
		total_activated_stake: r.total_activated_stake.toString(),
		thresh_activated_stake_time: r.thresh_activated_stake_time,
		last_producer_schedule_size: r.last_producer_schedule_size,
		total_producer_vote_weight: Number.parseFloat(r.total_producer_vote_weight),
		last_name_close: r.last_name_close,
	}
}

export type EosioGlobalState2 = {
	new_ram_per_block: number
	last_ram_increase: string
	last_block_num: string
	total_producer_votepay_share: number
	revision: number
};

export type EosioGlobalState2Interm = {
	new_ram_per_block: number
	last_ram_increase: string
	last_block_num: string
	total_producer_votepay_share: string
	revision: number
};

export function mapEosioGlobalState2(r: EosioGlobalState2Interm): EosioGlobalState2 {
	return {
		new_ram_per_block: r.new_ram_per_block,
		last_ram_increase: r.last_ram_increase,
		last_block_num: r.last_block_num,
		total_producer_votepay_share: Number.parseFloat(r.total_producer_votepay_share),
		revision: r.revision,
	}
}

export type EosioGlobalState3 = {
	last_vpay_state_update: string
	total_vpay_share_change_rate: number
};

export type EosioGlobalState3Interm = {
	last_vpay_state_update: string
	total_vpay_share_change_rate: string
};

export function mapEosioGlobalState3(r: EosioGlobalState3Interm): EosioGlobalState3 {
	return {
		last_vpay_state_update: r.last_vpay_state_update,
		total_vpay_share_change_rate: Number.parseFloat(r.total_vpay_share_change_rate),
	}
}

export type EosioGlobalState4 = {
	continuous_rate: number
	inflation_pay_factor: string
	votepay_factor: string
};

export type EosioGlobalState4Interm = {
	continuous_rate: string
	inflation_pay_factor: number
	votepay_factor: number
};

export function mapEosioGlobalState4(r: EosioGlobalState4Interm): EosioGlobalState4 {
	return {
		continuous_rate: Number.parseFloat(r.continuous_rate),
		inflation_pay_factor: r.inflation_pay_factor.toString(),
		votepay_factor: r.votepay_factor.toString(),
	}
}

export type ExchangeState = {
	supply: Asset
	base: Connector
	quote: Connector
};

export type ExchangeStateInterm = {
	supply: string
	base: ConnectorInterm
	quote: ConnectorInterm
};

export function mapExchangeState(r: ExchangeStateInterm): ExchangeState {
	return {
		supply: new Asset(r.supply),
		base: mapConnector(r.base),
		quote: mapConnector(r.quote),
	}
}

export type Fundcpuloan = {
	from: string
	loan_num: string
	payment: Asset
};

export type FundcpuloanInterm = {
	from: string
	loan_num: number
	payment: string
};

export function mapFundcpuloan(r: FundcpuloanInterm): Fundcpuloan {
	return {
		from: r.from,
		loan_num: r.loan_num.toString(),
		payment: new Asset(r.payment),
	}
}

export type Fundnetloan = {
	from: string
	loan_num: string
	payment: Asset
};

export type FundnetloanInterm = {
	from: string
	loan_num: number
	payment: string
};

export function mapFundnetloan(r: FundnetloanInterm): Fundnetloan {
	return {
		from: r.from,
		loan_num: r.loan_num.toString(),
		payment: new Asset(r.payment),
	}
}

export type Init = {
	version: number
	core: Symbol
};

export type InitInterm = {
	version: number
	core: string
};

export function mapInit(r: InitInterm): Init {
	return {
		version: r.version,
		core: new Symbol(r.core),
	}
}

export type KeyWeight = {
	key: string
	weight: number
};

export type KeyWeightInterm = {
	key: string
	weight: number
};

export function mapKeyWeight(r: KeyWeightInterm): KeyWeight {
	return {
		key: r.key,
		weight: r.weight,
	}
}

export type Linkauth = {
	account: string
	code: string
	type: string
	requirement: string
};

export type LinkauthInterm = {
	account: string
	code: string
	type: string
	requirement: string
};

export function mapLinkauth(r: LinkauthInterm): Linkauth {
	return {
		account: r.account,
		code: r.code,
		type: r.type,
		requirement: r.requirement,
	}
}

export type Mvfrsavings = {
	owner: string
	rex: Asset
};

export type MvfrsavingsInterm = {
	owner: string
	rex: string
};

export function mapMvfrsavings(r: MvfrsavingsInterm): Mvfrsavings {
	return {
		owner: r.owner,
		rex: new Asset(r.rex),
	}
}

export type Mvtosavings = {
	owner: string
	rex: Asset
};

export type MvtosavingsInterm = {
	owner: string
	rex: string
};

export function mapMvtosavings(r: MvtosavingsInterm): Mvtosavings {
	return {
		owner: r.owner,
		rex: new Asset(r.rex),
	}
}

export type NameBid = {
	newname: string
	high_bidder: string
	high_bid: string
	last_bid_time: string
};

export type NameBidInterm = {
	newname: string
	high_bidder: string
	high_bid: number
	last_bid_time: string
};

export function mapNameBid(r: NameBidInterm): NameBid {
	return {
		newname: r.newname,
		high_bidder: r.high_bidder,
		high_bid: r.high_bid.toString(),
		last_bid_time: r.last_bid_time,
	}
}

export type Newaccount = {
	creator: string
	name: string
	owner: Authority
	active: Authority
};

export type NewaccountInterm = {
	creator: string
	name: string
	owner: AuthorityInterm
	active: AuthorityInterm
};

export function mapNewaccount(r: NewaccountInterm): Newaccount {
	return {
		creator: r.creator,
		name: r.name,
		owner: mapAuthority(r.owner),
		active: mapAuthority(r.active),
	}
}

export type Onblock = {
	header: BlockHeader
};

export type OnblockInterm = {
	header: BlockHeaderInterm
};

export function mapOnblock(r: OnblockInterm): Onblock {
	return {
		header: mapBlockHeader(r.header),
	}
}

export type Onerror = {
	sender_id: string
	sent_trx: string
};

export type OnerrorInterm = {
	sender_id: string
	sent_trx: string
};

export function mapOnerror(r: OnerrorInterm): Onerror {
	return {
		sender_id: r.sender_id,
		sent_trx: r.sent_trx,
	}
}

export type PairTimePointSecInt64 = {
	key: string
	value: string
};

export type PairTimePointSecInt64Interm = {
	key: string
	value: number
};

export function mapPairTimePointSecInt64(r: PairTimePointSecInt64Interm): PairTimePointSecInt64 {
	return {
		key: r.key,
		value: r.value.toString(),
	}
}

export type PermissionLevel = {
	actor: string
	permission: string
};

export type PermissionLevelInterm = {
	actor: string
	permission: string
};

export function mapPermissionLevel(r: PermissionLevelInterm): PermissionLevel {
	return {
		actor: r.actor,
		permission: r.permission,
	}
}

export type PermissionLevelWeight = {
	permission: PermissionLevel
	weight: number
};

export type PermissionLevelWeightInterm = {
	permission: PermissionLevelInterm
	weight: number
};

export function mapPermissionLevelWeight(r: PermissionLevelWeightInterm): PermissionLevelWeight {
	return {
		permission: mapPermissionLevel(r.permission),
		weight: r.weight,
	}
}

export type Powerup = {
	payer: string
	receiver: string
	days: number
	net_frac: string
	cpu_frac: string
	max_payment: Asset
};

export type PowerupInterm = {
	payer: string
	receiver: string
	days: number
	net_frac: number
	cpu_frac: number
	max_payment: string
};

export function mapPowerup(r: PowerupInterm): Powerup {
	return {
		payer: r.payer,
		receiver: r.receiver,
		days: r.days,
		net_frac: r.net_frac.toString(),
		cpu_frac: r.cpu_frac.toString(),
		max_payment: new Asset(r.max_payment),
	}
}

export type PowerupConfig = {
	net: PowerupConfigResource
	cpu: PowerupConfigResource
	powerup_days: unknown
	min_powerup_fee: unknown
};

export type PowerupConfigInterm = {
	net: PowerupConfigResourceInterm
	cpu: PowerupConfigResourceInterm
	powerup_days: unknown
	min_powerup_fee: unknown
};

export function mapPowerupConfig(r: PowerupConfigInterm): PowerupConfig {
	return {
		net: mapPowerupConfigResource(r.net),
		cpu: mapPowerupConfigResource(r.cpu),
		powerup_days: r.powerup_days,
		min_powerup_fee: r.min_powerup_fee,
	}
}

export type PowerupConfigResource = {
	current_weight_ratio: unknown
	target_weight_ratio: unknown
	assumed_stake_weight: unknown
	target_timestamp: unknown
	exponent: unknown
	decay_secs: unknown
	min_price: unknown
	max_price: unknown
};

export type PowerupConfigResourceInterm = {
	current_weight_ratio: unknown
	target_weight_ratio: unknown
	assumed_stake_weight: unknown
	target_timestamp: unknown
	exponent: unknown
	decay_secs: unknown
	min_price: unknown
	max_price: unknown
};

export function mapPowerupConfigResource(r: PowerupConfigResourceInterm): PowerupConfigResource {
	return {
		current_weight_ratio: r.current_weight_ratio,
		target_weight_ratio: r.target_weight_ratio,
		assumed_stake_weight: r.assumed_stake_weight,
		target_timestamp: r.target_timestamp,
		exponent: r.exponent,
		decay_secs: r.decay_secs,
		min_price: r.min_price,
		max_price: r.max_price,
	}
}

export type PowerupOrder = {
	version: number
	id: string
	owner: string
	net_weight: string
	cpu_weight: string
	expires: string
};

export type PowerupOrderInterm = {
	version: number
	id: number
	owner: string
	net_weight: number
	cpu_weight: number
	expires: string
};

export function mapPowerupOrder(r: PowerupOrderInterm): PowerupOrder {
	return {
		version: r.version,
		id: r.id.toString(),
		owner: r.owner,
		net_weight: r.net_weight.toString(),
		cpu_weight: r.cpu_weight.toString(),
		expires: r.expires,
	}
}

export type PowerupState = {
	version: number
	net: PowerupStateResource
	cpu: PowerupStateResource
	powerup_days: number
	min_powerup_fee: Asset
};

export type PowerupStateInterm = {
	version: number
	net: PowerupStateResourceInterm
	cpu: PowerupStateResourceInterm
	powerup_days: number
	min_powerup_fee: string
};

export function mapPowerupState(r: PowerupStateInterm): PowerupState {
	return {
		version: r.version,
		net: mapPowerupStateResource(r.net),
		cpu: mapPowerupStateResource(r.cpu),
		powerup_days: r.powerup_days,
		min_powerup_fee: new Asset(r.min_powerup_fee),
	}
}

export type PowerupStateResource = {
	version: number
	weight: string
	weight_ratio: string
	assumed_stake_weight: string
	initial_weight_ratio: string
	target_weight_ratio: string
	initial_timestamp: string
	target_timestamp: string
	exponent: number
	decay_secs: number
	min_price: Asset
	max_price: Asset
	utilization: string
	adjusted_utilization: string
	utilization_timestamp: string
};

export type PowerupStateResourceInterm = {
	version: number
	weight: number
	weight_ratio: number
	assumed_stake_weight: number
	initial_weight_ratio: number
	target_weight_ratio: number
	initial_timestamp: string
	target_timestamp: string
	exponent: string
	decay_secs: number
	min_price: string
	max_price: string
	utilization: number
	adjusted_utilization: number
	utilization_timestamp: string
};

export function mapPowerupStateResource(r: PowerupStateResourceInterm): PowerupStateResource {
	return {
		version: r.version,
		weight: r.weight.toString(),
		weight_ratio: r.weight_ratio.toString(),
		assumed_stake_weight: r.assumed_stake_weight.toString(),
		initial_weight_ratio: r.initial_weight_ratio.toString(),
		target_weight_ratio: r.target_weight_ratio.toString(),
		initial_timestamp: r.initial_timestamp,
		target_timestamp: r.target_timestamp,
		exponent: Number.parseFloat(r.exponent),
		decay_secs: r.decay_secs,
		min_price: new Asset(r.min_price),
		max_price: new Asset(r.max_price),
		utilization: r.utilization.toString(),
		adjusted_utilization: r.adjusted_utilization.toString(),
		utilization_timestamp: r.utilization_timestamp,
	}
}

export type Powerupexec = {
	user: string
	max: number
};

export type PowerupexecInterm = {
	user: string
	max: number
};

export function mapPowerupexec(r: PowerupexecInterm): Powerupexec {
	return {
		user: r.user,
		max: r.max,
	}
}

export type ProducerInfo = {
	owner: string
	total_votes: number
	producer_key: string
	is_active: boolean
	url: string
	unpaid_blocks: number
	last_claim_time: string
	location: number
	producer_authority: unknown
};

export type ProducerInfoInterm = {
	owner: string
	total_votes: string
	producer_key: string
	is_active: number
	url: string
	unpaid_blocks: number
	last_claim_time: string
	location: number
	producer_authority: unknown
};

export function mapProducerInfo(r: ProducerInfoInterm): ProducerInfo {
	return {
		owner: r.owner,
		total_votes: Number.parseFloat(r.total_votes),
		producer_key: r.producer_key,
		is_active: !!(r.is_active),
		url: r.url,
		unpaid_blocks: r.unpaid_blocks,
		last_claim_time: r.last_claim_time,
		location: r.location,
		producer_authority: r.producer_authority,
	}
}

export type ProducerInfo2 = {
	owner: string
	votepay_share: number
	last_votepay_share_update: string
};

export type ProducerInfo2Interm = {
	owner: string
	votepay_share: string
	last_votepay_share_update: string
};

export function mapProducerInfo2(r: ProducerInfo2Interm): ProducerInfo2 {
	return {
		owner: r.owner,
		votepay_share: Number.parseFloat(r.votepay_share),
		last_votepay_share_update: r.last_votepay_share_update,
	}
}

export type ProducerKey = {
	producer_name: string
	block_signing_key: string
};

export type ProducerKeyInterm = {
	producer_name: string
	block_signing_key: string
};

export function mapProducerKey(r: ProducerKeyInterm): ProducerKey {
	return {
		producer_name: r.producer_name,
		block_signing_key: r.block_signing_key,
	}
}

export type ProducerSchedule = {
	version: number
	producers: ProducerKey[]
};

export type ProducerScheduleInterm = {
	version: number
	producers: ProducerKeyInterm[]
};

export function mapProducerSchedule(r: ProducerScheduleInterm): ProducerSchedule {
	return {
		version: r.version,
		producers: r.producers.map(n => mapProducerKey(n)),
	}
}

export type Refund = {
	owner: string
};

export type RefundInterm = {
	owner: string
};

export function mapRefund(r: RefundInterm): Refund {
	return {
		owner: r.owner,
	}
}

export type RefundRequest = {
	owner: string
	request_time: string
	net_amount: Asset
	cpu_amount: Asset
};

export type RefundRequestInterm = {
	owner: string
	request_time: string
	net_amount: string
	cpu_amount: string
};

export function mapRefundRequest(r: RefundRequestInterm): RefundRequest {
	return {
		owner: r.owner,
		request_time: r.request_time,
		net_amount: new Asset(r.net_amount),
		cpu_amount: new Asset(r.cpu_amount),
	}
}

export type Regproducer = {
	producer: string
	producer_key: string
	url: string
	location: number
};

export type RegproducerInterm = {
	producer: string
	producer_key: string
	url: string
	location: number
};

export function mapRegproducer(r: RegproducerInterm): Regproducer {
	return {
		producer: r.producer,
		producer_key: r.producer_key,
		url: r.url,
		location: r.location,
	}
}

export type Regproducer2 = {
	producer: string
	producer_authority: unknown
	url: string
	location: number
};

export type Regproducer2Interm = {
	producer: string
	producer_authority: unknown
	url: string
	location: number
};

export function mapRegproducer2(r: Regproducer2Interm): Regproducer2 {
	return {
		producer: r.producer,
		producer_authority: r.producer_authority,
		url: r.url,
		location: r.location,
	}
}

export type Regproxy = {
	proxy: string
	isproxy: boolean
};

export type RegproxyInterm = {
	proxy: string
	isproxy: number
};

export function mapRegproxy(r: RegproxyInterm): Regproxy {
	return {
		proxy: r.proxy,
		isproxy: !!(r.isproxy),
	}
}

export type Rentcpu = {
	from: string
	receiver: string
	loan_payment: Asset
	loan_fund: Asset
};

export type RentcpuInterm = {
	from: string
	receiver: string
	loan_payment: string
	loan_fund: string
};

export function mapRentcpu(r: RentcpuInterm): Rentcpu {
	return {
		from: r.from,
		receiver: r.receiver,
		loan_payment: new Asset(r.loan_payment),
		loan_fund: new Asset(r.loan_fund),
	}
}

export type Rentnet = {
	from: string
	receiver: string
	loan_payment: Asset
	loan_fund: Asset
};

export type RentnetInterm = {
	from: string
	receiver: string
	loan_payment: string
	loan_fund: string
};

export function mapRentnet(r: RentnetInterm): Rentnet {
	return {
		from: r.from,
		receiver: r.receiver,
		loan_payment: new Asset(r.loan_payment),
		loan_fund: new Asset(r.loan_fund),
	}
}

export type RexBalance = {
	version: number
	owner: string
	vote_stake: Asset
	rex_balance: Asset
	matured_rex: string
	rex_maturities: PairTimePointSecInt64[]
};

export type RexBalanceInterm = {
	version: number
	owner: string
	vote_stake: string
	rex_balance: string
	matured_rex: number
	rex_maturities: PairTimePointSecInt64Interm[]
};

export function mapRexBalance(r: RexBalanceInterm): RexBalance {
	return {
		version: r.version,
		owner: r.owner,
		vote_stake: new Asset(r.vote_stake),
		rex_balance: new Asset(r.rex_balance),
		matured_rex: r.matured_rex.toString(),
		rex_maturities: r.rex_maturities.map(n => mapPairTimePointSecInt64(n)),
	}
}

export type RexFund = {
	version: number
	owner: string
	balance: Asset
};

export type RexFundInterm = {
	version: number
	owner: string
	balance: string
};

export function mapRexFund(r: RexFundInterm): RexFund {
	return {
		version: r.version,
		owner: r.owner,
		balance: new Asset(r.balance),
	}
}

export type RexLoan = {
	version: number
	from: string
	receiver: string
	payment: Asset
	balance: Asset
	total_staked: Asset
	loan_num: string
	expiration: string
};

export type RexLoanInterm = {
	version: number
	from: string
	receiver: string
	payment: string
	balance: string
	total_staked: string
	loan_num: number
	expiration: string
};

export function mapRexLoan(r: RexLoanInterm): RexLoan {
	return {
		version: r.version,
		from: r.from,
		receiver: r.receiver,
		payment: new Asset(r.payment),
		balance: new Asset(r.balance),
		total_staked: new Asset(r.total_staked),
		loan_num: r.loan_num.toString(),
		expiration: r.expiration,
	}
}

export type RexOrder = {
	version: number
	owner: string
	rex_requested: Asset
	proceeds: Asset
	stake_change: Asset
	order_time: string
	is_open: boolean
};

export type RexOrderInterm = {
	version: number
	owner: string
	rex_requested: string
	proceeds: string
	stake_change: string
	order_time: string
	is_open: number
};

export function mapRexOrder(r: RexOrderInterm): RexOrder {
	return {
		version: r.version,
		owner: r.owner,
		rex_requested: new Asset(r.rex_requested),
		proceeds: new Asset(r.proceeds),
		stake_change: new Asset(r.stake_change),
		order_time: r.order_time,
		is_open: !!(r.is_open),
	}
}

export type RexPool = {
	version: number
	total_lent: Asset
	total_unlent: Asset
	total_rent: Asset
	total_lendable: Asset
	total_rex: Asset
	namebid_proceeds: Asset
	loan_num: string
};

export type RexPoolInterm = {
	version: number
	total_lent: string
	total_unlent: string
	total_rent: string
	total_lendable: string
	total_rex: string
	namebid_proceeds: string
	loan_num: number
};

export function mapRexPool(r: RexPoolInterm): RexPool {
	return {
		version: r.version,
		total_lent: new Asset(r.total_lent),
		total_unlent: new Asset(r.total_unlent),
		total_rent: new Asset(r.total_rent),
		total_lendable: new Asset(r.total_lendable),
		total_rex: new Asset(r.total_rex),
		namebid_proceeds: new Asset(r.namebid_proceeds),
		loan_num: r.loan_num.toString(),
	}
}

export type RexReturnBuckets = {
	version: number
	return_buckets: PairTimePointSecInt64[]
};

export type RexReturnBucketsInterm = {
	version: number
	return_buckets: PairTimePointSecInt64Interm[]
};

export function mapRexReturnBuckets(r: RexReturnBucketsInterm): RexReturnBuckets {
	return {
		version: r.version,
		return_buckets: r.return_buckets.map(n => mapPairTimePointSecInt64(n)),
	}
}

export type RexReturnPool = {
	version: number
	last_dist_time: string
	pending_bucket_time: string
	oldest_bucket_time: string
	pending_bucket_proceeds: string
	current_rate_of_increase: string
	proceeds: string
};

export type RexReturnPoolInterm = {
	version: number
	last_dist_time: string
	pending_bucket_time: string
	oldest_bucket_time: string
	pending_bucket_proceeds: number
	current_rate_of_increase: number
	proceeds: number
};

export function mapRexReturnPool(r: RexReturnPoolInterm): RexReturnPool {
	return {
		version: r.version,
		last_dist_time: r.last_dist_time,
		pending_bucket_time: r.pending_bucket_time,
		oldest_bucket_time: r.oldest_bucket_time,
		pending_bucket_proceeds: r.pending_bucket_proceeds.toString(),
		current_rate_of_increase: r.current_rate_of_increase.toString(),
		proceeds: r.proceeds.toString(),
	}
}

export type Rexexec = {
	user: string
	max: number
};

export type RexexecInterm = {
	user: string
	max: number
};

export function mapRexexec(r: RexexecInterm): Rexexec {
	return {
		user: r.user,
		max: r.max,
	}
}

export type Rmvproducer = {
	producer: string
};

export type RmvproducerInterm = {
	producer: string
};

export function mapRmvproducer(r: RmvproducerInterm): Rmvproducer {
	return {
		producer: r.producer,
	}
}

export type Sellram = {
	account: string
	bytes: string
};

export type SellramInterm = {
	account: string
	bytes: number
};

export function mapSellram(r: SellramInterm): Sellram {
	return {
		account: r.account,
		bytes: r.bytes.toString(),
	}
}

export type Sellrex = {
	from: string
	rex: Asset
};

export type SellrexInterm = {
	from: string
	rex: string
};

export function mapSellrex(r: SellrexInterm): Sellrex {
	return {
		from: r.from,
		rex: new Asset(r.rex),
	}
}

export type Setabi = {
	account: string
	abi: string
};

export type SetabiInterm = {
	account: string
	abi: string
};

export function mapSetabi(r: SetabiInterm): Setabi {
	return {
		account: r.account,
		abi: r.abi,
	}
}

export type Setacctcpu = {
	account: string
	cpu_weight: unknown
};

export type SetacctcpuInterm = {
	account: string
	cpu_weight: unknown
};

export function mapSetacctcpu(r: SetacctcpuInterm): Setacctcpu {
	return {
		account: r.account,
		cpu_weight: r.cpu_weight,
	}
}

export type Setacctnet = {
	account: string
	net_weight: unknown
};

export type SetacctnetInterm = {
	account: string
	net_weight: unknown
};

export function mapSetacctnet(r: SetacctnetInterm): Setacctnet {
	return {
		account: r.account,
		net_weight: r.net_weight,
	}
}

export type Setacctram = {
	account: string
	ram_bytes: unknown
};

export type SetacctramInterm = {
	account: string
	ram_bytes: unknown
};

export function mapSetacctram(r: SetacctramInterm): Setacctram {
	return {
		account: r.account,
		ram_bytes: r.ram_bytes,
	}
}

export type Setalimits = {
	account: string
	ram_bytes: string
	net_weight: string
	cpu_weight: string
};

export type SetalimitsInterm = {
	account: string
	ram_bytes: number
	net_weight: number
	cpu_weight: number
};

export function mapSetalimits(r: SetalimitsInterm): Setalimits {
	return {
		account: r.account,
		ram_bytes: r.ram_bytes.toString(),
		net_weight: r.net_weight.toString(),
		cpu_weight: r.cpu_weight.toString(),
	}
}

export type Setcode = {
	account: string
	vmtype: number
	vmversion: number
	code: string
};

export type SetcodeInterm = {
	account: string
	vmtype: number
	vmversion: number
	code: string
};

export function mapSetcode(r: SetcodeInterm): Setcode {
	return {
		account: r.account,
		vmtype: r.vmtype,
		vmversion: r.vmversion,
		code: r.code,
	}
}

export type Setinflation = {
	annual_rate: string
	inflation_pay_factor: string
	votepay_factor: string
};

export type SetinflationInterm = {
	annual_rate: number
	inflation_pay_factor: number
	votepay_factor: number
};

export function mapSetinflation(r: SetinflationInterm): Setinflation {
	return {
		annual_rate: r.annual_rate.toString(),
		inflation_pay_factor: r.inflation_pay_factor.toString(),
		votepay_factor: r.votepay_factor.toString(),
	}
}

export type Setparams = {
	params: BlockchainParameters
};

export type SetparamsInterm = {
	params: BlockchainParametersInterm
};

export function mapSetparams(r: SetparamsInterm): Setparams {
	return {
		params: mapBlockchainParameters(r.params),
	}
}

export type Setpriv = {
	account: string
	is_priv: number
};

export type SetprivInterm = {
	account: string
	is_priv: number
};

export function mapSetpriv(r: SetprivInterm): Setpriv {
	return {
		account: r.account,
		is_priv: r.is_priv,
	}
}

export type Setram = {
	max_ram_size: string
};

export type SetramInterm = {
	max_ram_size: number
};

export function mapSetram(r: SetramInterm): Setram {
	return {
		max_ram_size: r.max_ram_size.toString(),
	}
}

export type Setramrate = {
	bytes_per_block: number
};

export type SetramrateInterm = {
	bytes_per_block: number
};

export function mapSetramrate(r: SetramrateInterm): Setramrate {
	return {
		bytes_per_block: r.bytes_per_block,
	}
}

export type Setrex = {
	balance: Asset
};

export type SetrexInterm = {
	balance: string
};

export function mapSetrex(r: SetrexInterm): Setrex {
	return {
		balance: new Asset(r.balance),
	}
}

export type Undelegatebw = {
	from: string
	receiver: string
	unstake_net_quantity: Asset
	unstake_cpu_quantity: Asset
};

export type UndelegatebwInterm = {
	from: string
	receiver: string
	unstake_net_quantity: string
	unstake_cpu_quantity: string
};

export function mapUndelegatebw(r: UndelegatebwInterm): Undelegatebw {
	return {
		from: r.from,
		receiver: r.receiver,
		unstake_net_quantity: new Asset(r.unstake_net_quantity),
		unstake_cpu_quantity: new Asset(r.unstake_cpu_quantity),
	}
}

export type Unlinkauth = {
	account: string
	code: string
	type: string
};

export type UnlinkauthInterm = {
	account: string
	code: string
	type: string
};

export function mapUnlinkauth(r: UnlinkauthInterm): Unlinkauth {
	return {
		account: r.account,
		code: r.code,
		type: r.type,
	}
}

export type Unregprod = {
	producer: string
};

export type UnregprodInterm = {
	producer: string
};

export function mapUnregprod(r: UnregprodInterm): Unregprod {
	return {
		producer: r.producer,
	}
}

export type Unstaketorex = {
	owner: string
	receiver: string
	from_net: Asset
	from_cpu: Asset
};

export type UnstaketorexInterm = {
	owner: string
	receiver: string
	from_net: string
	from_cpu: string
};

export function mapUnstaketorex(r: UnstaketorexInterm): Unstaketorex {
	return {
		owner: r.owner,
		receiver: r.receiver,
		from_net: new Asset(r.from_net),
		from_cpu: new Asset(r.from_cpu),
	}
}

export type Updateauth = {
	account: string
	permission: string
	parent: string
	auth: Authority
};

export type UpdateauthInterm = {
	account: string
	permission: string
	parent: string
	auth: AuthorityInterm
};

export function mapUpdateauth(r: UpdateauthInterm): Updateauth {
	return {
		account: r.account,
		permission: r.permission,
		parent: r.parent,
		auth: mapAuthority(r.auth),
	}
}

export type Updaterex = {
	owner: string
};

export type UpdaterexInterm = {
	owner: string
};

export function mapUpdaterex(r: UpdaterexInterm): Updaterex {
	return {
		owner: r.owner,
	}
}

export type Updtrevision = {
	revision: number
};

export type UpdtrevisionInterm = {
	revision: number
};

export function mapUpdtrevision(r: UpdtrevisionInterm): Updtrevision {
	return {
		revision: r.revision,
	}
}

export type UserResources = {
	owner: string
	net_weight: Asset
	cpu_weight: Asset
	ram_bytes: string
};

export type UserResourcesInterm = {
	owner: string
	net_weight: string
	cpu_weight: string
	ram_bytes: number
};

export function mapUserResources(r: UserResourcesInterm): UserResources {
	return {
		owner: r.owner,
		net_weight: new Asset(r.net_weight),
		cpu_weight: new Asset(r.cpu_weight),
		ram_bytes: r.ram_bytes.toString(),
	}
}

export type Voteproducer = {
	voter: string
	proxy: string
	producers: string[]
};

export type VoteproducerInterm = {
	voter: string
	proxy: string
	producers: string[]
};

export function mapVoteproducer(r: VoteproducerInterm): Voteproducer {
	return {
		voter: r.voter,
		proxy: r.proxy,
		producers: r.producers,
	}
}

export type VoterInfo = {
	owner: string
	proxy: string
	producers: string[]
	staked: string
	last_vote_weight: number
	proxied_vote_weight: number
	is_proxy: boolean
	flags1: number
	reserved2: number
	reserved3: Asset
};

export type VoterInfoInterm = {
	owner: string
	proxy: string
	producers: string[]
	staked: number
	last_vote_weight: string
	proxied_vote_weight: string
	is_proxy: number
	flags1: number
	reserved2: number
	reserved3: string
};

export function mapVoterInfo(r: VoterInfoInterm): VoterInfo {
	return {
		owner: r.owner,
		proxy: r.proxy,
		producers: r.producers,
		staked: r.staked.toString(),
		last_vote_weight: Number.parseFloat(r.last_vote_weight),
		proxied_vote_weight: Number.parseFloat(r.proxied_vote_weight),
		is_proxy: !!(r.is_proxy),
		flags1: r.flags1,
		reserved2: r.reserved2,
		reserved3: new Asset(r.reserved3),
	}
}

export type WaitWeight = {
	wait_sec: number
	weight: number
};

export type WaitWeightInterm = {
	wait_sec: number
	weight: number
};

export function mapWaitWeight(r: WaitWeightInterm): WaitWeight {
	return {
		wait_sec: r.wait_sec,
		weight: r.weight,
	}
}

export type Withdraw = {
	owner: string
	amount: Asset
};

export type WithdrawInterm = {
	owner: string
	amount: string
};

export function mapWithdraw(r: WithdrawInterm): Withdraw {
	return {
		owner: r.owner,
		amount: new Asset(r.amount),
	}
}

export type AbiHashRows = {
    more: boolean;
    next_key: string;
    rows: AbiHash[];
};

export type AbiHashRowsInterm = {
    more: boolean;
    next_key: string;
    rows: AbiHashInterm[];
};
export type BidRefundRows = {
    more: boolean;
    next_key: string;
    rows: BidRefund[];
};

export type BidRefundRowsInterm = {
    more: boolean;
    next_key: string;
    rows: BidRefundInterm[];
};
export type RexLoanRows = {
    more: boolean;
    next_key: string;
    rows: RexLoan[];
};

export type RexLoanRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexLoanInterm[];
};
export type DelegatedBandwidthRows = {
    more: boolean;
    next_key: string;
    rows: DelegatedBandwidth[];
};

export type DelegatedBandwidthRowsInterm = {
    more: boolean;
    next_key: string;
    rows: DelegatedBandwidthInterm[];
};
export type EosioGlobalStateRows = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState[];
};

export type EosioGlobalStateRowsInterm = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalStateInterm[];
};
export type EosioGlobalState2Rows = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState2[];
};

export type EosioGlobalState2RowsInterm = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState2Interm[];
};
export type EosioGlobalState3Rows = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState3[];
};

export type EosioGlobalState3RowsInterm = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState3Interm[];
};
export type EosioGlobalState4Rows = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState4[];
};

export type EosioGlobalState4RowsInterm = {
    more: boolean;
    next_key: string;
    rows: EosioGlobalState4Interm[];
};
export type NameBidRows = {
    more: boolean;
    next_key: string;
    rows: NameBid[];
};

export type NameBidRowsInterm = {
    more: boolean;
    next_key: string;
    rows: NameBidInterm[];
};
export type PowerupOrderRows = {
    more: boolean;
    next_key: string;
    rows: PowerupOrder[];
};

export type PowerupOrderRowsInterm = {
    more: boolean;
    next_key: string;
    rows: PowerupOrderInterm[];
};
export type PowerupStateRows = {
    more: boolean;
    next_key: string;
    rows: PowerupState[];
};

export type PowerupStateRowsInterm = {
    more: boolean;
    next_key: string;
    rows: PowerupStateInterm[];
};
export type ProducerInfoRows = {
    more: boolean;
    next_key: string;
    rows: ProducerInfo[];
};

export type ProducerInfoRowsInterm = {
    more: boolean;
    next_key: string;
    rows: ProducerInfoInterm[];
};
export type ProducerInfo2Rows = {
    more: boolean;
    next_key: string;
    rows: ProducerInfo2[];
};

export type ProducerInfo2RowsInterm = {
    more: boolean;
    next_key: string;
    rows: ProducerInfo2Interm[];
};
export type ExchangeStateRows = {
    more: boolean;
    next_key: string;
    rows: ExchangeState[];
};

export type ExchangeStateRowsInterm = {
    more: boolean;
    next_key: string;
    rows: ExchangeStateInterm[];
};
export type RefundRequestRows = {
    more: boolean;
    next_key: string;
    rows: RefundRequest[];
};

export type RefundRequestRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RefundRequestInterm[];
};
export type RexReturnBucketsRows = {
    more: boolean;
    next_key: string;
    rows: RexReturnBuckets[];
};

export type RexReturnBucketsRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexReturnBucketsInterm[];
};
export type RexBalanceRows = {
    more: boolean;
    next_key: string;
    rows: RexBalance[];
};

export type RexBalanceRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexBalanceInterm[];
};
export type RexFundRows = {
    more: boolean;
    next_key: string;
    rows: RexFund[];
};

export type RexFundRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexFundInterm[];
};
export type RexPoolRows = {
    more: boolean;
    next_key: string;
    rows: RexPool[];
};

export type RexPoolRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexPoolInterm[];
};
export type RexOrderRows = {
    more: boolean;
    next_key: string;
    rows: RexOrder[];
};

export type RexOrderRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexOrderInterm[];
};
export type RexReturnPoolRows = {
    more: boolean;
    next_key: string;
    rows: RexReturnPool[];
};

export type RexReturnPoolRowsInterm = {
    more: boolean;
    next_key: string;
    rows: RexReturnPoolInterm[];
};
export type UserResourcesRows = {
    more: boolean;
    next_key: string;
    rows: UserResources[];
};

export type UserResourcesRowsInterm = {
    more: boolean;
    next_key: string;
    rows: UserResourcesInterm[];
};
export type VoterInfoRows = {
    more: boolean;
    next_key: string;
    rows: VoterInfo[];
};

export type VoterInfoRowsInterm = {
    more: boolean;
    next_key: string;
    rows: VoterInfoInterm[];
};
