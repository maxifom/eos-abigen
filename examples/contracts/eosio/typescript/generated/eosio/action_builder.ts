// Generated by eos-abigen version master
import * as types from "./types"
import {Authorization} from "./types"

export interface ActionBuilderOpts {
    defaultAuthorization?: Authorization;
}

export class ActionBuilder {
    private actions: types.Action[];
    private readonly defaultAuthorization?: Authorization;

    constructor(opts?: ActionBuilderOpts) {
        this.actions = [];
        this.defaultAuthorization = opts?.defaultAuthorization;
    }

    addRawAction(action: types.Action): this {
        this.actions.push(action);
        return this;
    }

    build(): types.Action[] {
		let actions = this.actions;
		this.actions = [];
        return actions;
    }

	activate(params: types.Activate, ...authorizations: Authorization[]): this {
		const actionName = "activate";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	bidname(params: types.Bidname, ...authorizations: Authorization[]): this {
		const actionName = "bidname";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	bidrefund(params: types.Bidrefund, ...authorizations: Authorization[]): this {
		const actionName = "bidrefund";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	buyram(params: types.Buyram, ...authorizations: Authorization[]): this {
		const actionName = "buyram";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	buyrambytes(params: types.Buyrambytes, ...authorizations: Authorization[]): this {
		const actionName = "buyrambytes";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	buyrex(params: types.Buyrex, ...authorizations: Authorization[]): this {
		const actionName = "buyrex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	canceldelay(params: types.Canceldelay, ...authorizations: Authorization[]): this {
		const actionName = "canceldelay";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	cfgpowerup(params: types.Cfgpowerup, ...authorizations: Authorization[]): this {
		const actionName = "cfgpowerup";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	claimrewards(params: types.Claimrewards, ...authorizations: Authorization[]): this {
		const actionName = "claimrewards";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	closerex(params: types.Closerex, ...authorizations: Authorization[]): this {
		const actionName = "closerex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	cnclrexorder(params: types.Cnclrexorder, ...authorizations: Authorization[]): this {
		const actionName = "cnclrexorder";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	consolidate(params: types.Consolidate, ...authorizations: Authorization[]): this {
		const actionName = "consolidate";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	defcpuloan(params: types.Defcpuloan, ...authorizations: Authorization[]): this {
		const actionName = "defcpuloan";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	defnetloan(params: types.Defnetloan, ...authorizations: Authorization[]): this {
		const actionName = "defnetloan";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	delegatebw(params: types.Delegatebw, ...authorizations: Authorization[]): this {
		const actionName = "delegatebw";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	deleteauth(params: types.Deleteauth, ...authorizations: Authorization[]): this {
		const actionName = "deleteauth";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	deposit(params: types.Deposit, ...authorizations: Authorization[]): this {
		const actionName = "deposit";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	fundcpuloan(params: types.Fundcpuloan, ...authorizations: Authorization[]): this {
		const actionName = "fundcpuloan";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	fundnetloan(params: types.Fundnetloan, ...authorizations: Authorization[]): this {
		const actionName = "fundnetloan";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	init(params: types.Init, ...authorizations: Authorization[]): this {
		const actionName = "init";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	linkauth(params: types.Linkauth, ...authorizations: Authorization[]): this {
		const actionName = "linkauth";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	mvfrsavings(params: types.Mvfrsavings, ...authorizations: Authorization[]): this {
		const actionName = "mvfrsavings";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	mvtosavings(params: types.Mvtosavings, ...authorizations: Authorization[]): this {
		const actionName = "mvtosavings";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	newaccount(params: types.Newaccount, ...authorizations: Authorization[]): this {
		const actionName = "newaccount";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	onblock(params: types.Onblock, ...authorizations: Authorization[]): this {
		const actionName = "onblock";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	onerror(params: types.Onerror, ...authorizations: Authorization[]): this {
		const actionName = "onerror";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	powerup(params: types.Powerup, ...authorizations: Authorization[]): this {
		const actionName = "powerup";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	powerupexec(params: types.Powerupexec, ...authorizations: Authorization[]): this {
		const actionName = "powerupexec";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	refund(params: types.Refund, ...authorizations: Authorization[]): this {
		const actionName = "refund";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	regproducer(params: types.Regproducer, ...authorizations: Authorization[]): this {
		const actionName = "regproducer";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	regproducer2(params: types.Regproducer2, ...authorizations: Authorization[]): this {
		const actionName = "regproducer2";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	regproxy(params: types.Regproxy, ...authorizations: Authorization[]): this {
		const actionName = "regproxy";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	rentcpu(params: types.Rentcpu, ...authorizations: Authorization[]): this {
		const actionName = "rentcpu";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	rentnet(params: types.Rentnet, ...authorizations: Authorization[]): this {
		const actionName = "rentnet";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	rexexec(params: types.Rexexec, ...authorizations: Authorization[]): this {
		const actionName = "rexexec";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	rmvproducer(params: types.Rmvproducer, ...authorizations: Authorization[]): this {
		const actionName = "rmvproducer";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	sellram(params: types.Sellram, ...authorizations: Authorization[]): this {
		const actionName = "sellram";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	sellrex(params: types.Sellrex, ...authorizations: Authorization[]): this {
		const actionName = "sellrex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setabi(params: types.Setabi, ...authorizations: Authorization[]): this {
		const actionName = "setabi";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setacctcpu(params: types.Setacctcpu, ...authorizations: Authorization[]): this {
		const actionName = "setacctcpu";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setacctnet(params: types.Setacctnet, ...authorizations: Authorization[]): this {
		const actionName = "setacctnet";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setacctram(params: types.Setacctram, ...authorizations: Authorization[]): this {
		const actionName = "setacctram";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setalimits(params: types.Setalimits, ...authorizations: Authorization[]): this {
		const actionName = "setalimits";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setcode(params: types.Setcode, ...authorizations: Authorization[]): this {
		const actionName = "setcode";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setinflation(params: types.Setinflation, ...authorizations: Authorization[]): this {
		const actionName = "setinflation";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setparams(params: types.Setparams, ...authorizations: Authorization[]): this {
		const actionName = "setparams";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setpriv(params: types.Setpriv, ...authorizations: Authorization[]): this {
		const actionName = "setpriv";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setram(params: types.Setram, ...authorizations: Authorization[]): this {
		const actionName = "setram";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setramrate(params: types.Setramrate, ...authorizations: Authorization[]): this {
		const actionName = "setramrate";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	setrex(params: types.Setrex, ...authorizations: Authorization[]): this {
		const actionName = "setrex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	undelegatebw(params: types.Undelegatebw, ...authorizations: Authorization[]): this {
		const actionName = "undelegatebw";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	unlinkauth(params: types.Unlinkauth, ...authorizations: Authorization[]): this {
		const actionName = "unlinkauth";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	unregprod(params: types.Unregprod, ...authorizations: Authorization[]): this {
		const actionName = "unregprod";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	unstaketorex(params: types.Unstaketorex, ...authorizations: Authorization[]): this {
		const actionName = "unstaketorex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	updateauth(params: types.Updateauth, ...authorizations: Authorization[]): this {
		const actionName = "updateauth";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	updaterex(params: types.Updaterex, ...authorizations: Authorization[]): this {
		const actionName = "updaterex";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	updtrevision(params: types.Updtrevision, ...authorizations: Authorization[]): this {
		const actionName = "updtrevision";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	voteproducer(params: types.Voteproducer, ...authorizations: Authorization[]): this {
		const actionName = "voteproducer";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	withdraw(params: types.Withdraw, ...authorizations: Authorization[]): this {
		const actionName = "withdraw";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	private getAuth(actionName: string, authorizations?: types.Authorization[]): types.Authorization[] {
        if (!authorizations || authorizations.length === 0) {
            if (!this.defaultAuthorization) {
                throw new Error("Authorizations or default authorization is required for action " + actionName)
            }

            return [this.defaultAuthorization]
        }

        return authorizations
    }
}