package ts

import "strings"

var ClientTemplate = strings.TrimSpace(`
// Generated by eos-abigen-js version {{.Version}}
import {JsonRpc} from "eosjs";
import * as types from "./types";

export interface ClientOpts {
    rpc: JsonRpc;
}

export class Client {
    private readonly rpc: JsonRpc;

    public constructor(opts: ClientOpts) {
        this.rpc = opts.rpc;
    }
    {{ range .Methods }}
    public async {{.MethodName}}(params?: types.GetTableRowsParams): Promise<types.{{.ReturnName}}> {
        let lower_bound = params?.lower_bound || params?.bounds || undefined;
        let upper_bound = params?.upper_bound || params?.bounds || undefined;
		let result: types.{{.ReturnName}}Interm = await this.rpc.get_table_rows({
            json: true,
            code: params?.code || types.CONTRACT_NAME,
            scope: params?.scope || types.CONTRACT_NAME,
            table: "{{.TableName}}",
            lower_bound: lower_bound,
            upper_bound: upper_bound,
            index_position: params?.index_position,
            key_type: params?.key_type,
            limit: params?.limit,
            reverse: params?.reverse,
            show_payer: params?.show_payer,
        });

		let real_result: types.{{.ReturnName}} = {
			more: result.more,
			next_key: result.next_key,
			rows: [],
		};

		real_result.rows = result.rows.map(function (r) {
            let row = {
				{{$lenFields := len .Struct.Fields -}}
				{{ range $i, $f := .Struct.Fields -}}
					{{- $f.Name}}: {{ $f.FormatNameValue "r" }} 
				{{- if (lt $i (sub $lenFields 1))}},{{end}}
{{ if (lt $i (sub $lenFields 1))}}				{{else}}			{{end}}{{end -}}
			};
			
			{{- range .Struct.Fields -}}
			{{- if gt .ArraysCount 0}} 

			// Mapping for {{ .Name }} field 
			{
					{{- template "nested" (genStructForNestedArray 0 .)}}
				// @ts-ignore
				row.{{.Name}} = arr0;
			}
			 	{{- end -}}
			{{- end}}

            return row;
        })

		return real_result;
    }
    {{end}}
}
`)
