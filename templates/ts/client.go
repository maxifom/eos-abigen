package ts

import "strings"

var ClientTemplate = strings.TrimSpace(`
// Generated by eos-abigen-js version {{.Version}}
import {JsonRpc} from "eosjs";
import * as types from "./types";

export class Client {
    rpc: JsonRpc;

    public constructor(opts: types.ClientOpts) {
        this.rpc = opts.rpc;
    }
    {{ range .Methods }}
    public async {{.MethodName}}(params?: types.GetTableRowsParams): Promise<types.{{.ReturnName}}> {
        let lower_bound = params?.lower_bound || params?.bounds || undefined;
        let upper_bound = params?.upper_bound || params?.bounds || undefined;
		let result: types.{{.ReturnName}}Interm = await this.rpc.get_table_rows({
            json: true,
            code: params?.code || types.CONTRACT_NAME,
            scope: params?.scope || types.CONTRACT_NAME,
            table: "{{.TableName}}",
            lower_bound: lower_bound,
            upper_bound: upper_bound,
            index_position: params?.index_position,
            key_type: params?.key_type,
            limit: params?.limit,
            reverse: params?.reverse,
            show_payer: params?.show_payer,
        });

		let real_result: types.{{.ReturnName}} = {
			more: result.more,
			next_key: result.next_key,
			rows: [],
		};

		real_result.rows = result.rows.map(function (r) {
            let row = {
				{{ range .Struct.Fields }}{{ .Name }}: {{ if ne .ArraysCount 0 }} [] {{else}}{{ if ne .Func "" }}{{.Func}}(r.{{.Name}}){{else}}r.{{.Name}}{{end}}{{ if ne .Method "" }}.{{.Method}}(){{end}}{{end}},
				{{ end }}
			};
			
			// TODO: nested array
			// {{ range .Struct.Fields }}
			// 	{{ if eq .ArraysCount 1 }} 
			// 		let {{.Name}}: {{if ne .FullType ""}} {{ .FullType }} {{ else }}{{.Type}}{{end}} = [];
			// 		{{ $field := . }}
			// 		{{ range $i, $a := .ArraysCountIterator }} 
			// 			for (let i{{$i}} = 0; i{{$i}} < r.{{$field.Name}}.length; i{{$i}} ++ ) {
			// 				{{$field.Name}}[i{{$i}}] = {{ if ne $field.Func "" }}{{$field.Func}}(r.{{$field.Name}}[i{{$i}}]){{else}}r.{{$field.Name}}[i{{$i}}]{{end}}{{ if ne $field.Method "" }}.{{$field.Method}}(){{end}};
			// 			}
			// 		{{end}}
			// 	{{end}}
			// {{ end }}

            return row;
        })

		return real_result;
    }
    {{end}}
}
`)
