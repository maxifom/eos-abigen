// Generated by eos-abigen version {{.Version}}
import * as types from "./types"
import {Authorization} from "./types"

export interface ActionBuilderOpts {
    defaultAuthorization?: Authorization;
}

export class ActionBuilder {
    private actions: types.Action[];
    private readonly defaultAuthorization?: Authorization;

    constructor(opts?: ActionBuilderOpts) {
        this.actions = [];
        this.defaultAuthorization = opts?.defaultAuthorization;
    }

    addRawAction(action: types.Action): this {
        this.actions.push(action);
        return this;
    }

    build(): types.Action[] {
		let actions = this.actions;
		this.actions = [];
        return actions;
    }

	{{range $i, $a := .Actions -}}
	{{ $a.Name }}(params: types.{{ $a.ParamsName }}, ...authorizations: Authorization[]): this {
		const actionName = "{{ $a.Name }}";

		this.actions.push(
			{
				account: types.CONTRACT_NAME,
				name: actionName,
				authorization: this.getAuth(actionName, authorizations),
				data: params
			}
		);

		return this;
	}

	{{ end -}}
	private getAuth(actionName: string, authorizations?: types.Authorization[]): types.Authorization[] {
        if (!authorizations || authorizations.length === 0) {
            if (!this.defaultAuthorization) {
                throw new Error("Authorizations or default authorization is required for action " + actionName)
            }

            return [this.defaultAuthorization]
        }

        return authorizations
    }
}
